@page "/projectcomponent/{projectid:int}/{designid:int}/delete/{id:int}"
@using AzureApp.Shared
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Project Design Component</PageTitle>

<h1>Delete Component</h1>

<p>Delete the component.</p>
<p>
    <a href="/projectcomponent/@ProjectId/@DesignId" class="btn btn-light" role="button">
        <span class="oi oi-arrow-left" aria-hidden="true"></span> Cancel
    </a>
</p>

@if (@model is not null)
{
    <EditForm EditContext="@editContext" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="Name" class="form-label">Name</label>
            <InputText @bind-Value="model.Name" class="form-control" disabled="true" />
            <ValidationMessage For="@(() => model.Name)" />
        </div>
        <div class="mb-3">
            <label for="Proposal" class="form-label">Proposal</label>
            <InputText @bind-Value="model.Proposal" class="form-control" disabled="true" />
            <ValidationMessage For="@(() => model.Proposal)" />
        </div>
        <div class="mb-3">
            <label for="ResourceId" class="form-label">Resource</label>
            <InputText @bind-Value="model.Resource.Name" class="form-control" disabled="true" />
            <ValidationMessage For="@(() => model.ResourceId)" />
        </div>
        <div class="mb-3">
            <label for="Owned" class="form-label">% Owned</label>
            <InputNumber @bind-Value="model.Owned" class="form-control" disabled="true" />
            <ValidationMessage For="@(() => model.Owned)" />
        </div>
        <div class="mb-3">
            <label for="Owner" class="form-label">Owner</label>
            <InputText @bind-Value="model.Owner" class="form-control" disabled="true" />
            <ValidationMessage For="@(() => model.Owner)" />
        </div>
        <div class="mb-3">
            <label for="Subscription" class="form-label">Subscription</label>
            <InputText @bind-Value="model.Subscription" class="form-control" disabled="true" />
            <ValidationMessage For="@(() => model.Subscription)" />
        </div>
        <div class="mb-3">
            <label for="ResourceGroup" class="form-label">Resource Group</label>
            <InputText @bind-Value="model.ResourceGroup" class="form-control" disabled="true" />
            <ValidationMessage For="@(() => model.ResourceGroup)" />
        </div>
        <div class="mb-3">
            <label for="Location" class="form-label">Location</label>
            <InputText @bind-Value="model.Location" class="form-control" disabled="true" />
            <ValidationMessage For="@(() => model.Location)" />
        </div>
        <div class="mb-3">
            <label for="Description" class="form-label">Description</label>
            <InputText @bind-Value="model.Description" class="form-control" disabled="true" />
            <ValidationMessage For="@(() => model.Description)" />
        </div>
        <div class="mb-3">
            <label for="Remark" class="form-label">Remark</label>
            <InputText @bind-Value="model.Remark" class="form-control" disabled="true" />
            <ValidationMessage For="@(() => model.Remark)" />
        </div>
        <div>
            <button type="submit" class="btn btn-primary">Delete</button>
            <button class="btn btn-light" @onclick="CancelItem">Cancel</button>
        </div>
    </EditForm>
}

@code {
    private EditContext? editContext { get; set; }
    private ValidationMessageStore? messageStore { get; set; }
    private AzureApp.Shared.ProjectDesign? parent { get; set; }
    private AzureApp.Shared.ProjectComponent? model { get; set; }
    private string navigateBack = null!;

    [Parameter]
    public int ProjectId { get; set; }

    [Parameter]
    public int DesignId { get; set; }

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        parent = await Http.GetFromJsonAsync<AzureApp.Shared.ProjectDesign>($"{nameof(AzureApp.Shared.ProjectDesign)}/item/{DesignId}");
        model = await Http.GetFromJsonAsync<AzureApp.Shared.ProjectComponent>($"{nameof(AzureApp.Shared.ProjectComponent)}/item/{Id}");
        editContext = new(model!);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);
        navigateBack = $"/projectcomponent/{ProjectId}/{DesignId}";
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        messageStore!.Clear();
    }

    private async Task HandleSubmit()
    {
        if (model is null || editContext is null || messageStore is null)
            return;

        var response = await Http.DeleteAsync($"{nameof(AzureApp.Shared.ProjectComponent)}/{Id}");
        if (response.IsSuccessStatusCode)
        { 
            NavigationManager.NavigateTo(navigateBack);
            return;
        }

        var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>() ?? new();
        if (errors.Any())
        {
            foreach (var keyValuePair in errors)
            {
                foreach(var msg in keyValuePair.Value) 
                {
                    messageStore.Add(editContext.Field(keyValuePair.Key), msg);
                }
            }
        }

        editContext.Validate();
        StateHasChanged();
    }

    private void CancelItem()
    {
        NavigationManager.NavigateTo(navigateBack);
    }
}
