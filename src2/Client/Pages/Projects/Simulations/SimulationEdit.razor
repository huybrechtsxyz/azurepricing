@page "/projectsimulation/{projectid:int}/add"
@page "/projectsimulation/{projectid:int}/{pageaction}/{id:int}"
@using AzureApp.Shared
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Project Simulation</PageTitle>

@if (PageAction == "add")
{
    <h1>Add Simulation</h1>
    <p>Add a new simulation.</p>
}
@if (PageAction == "edit")
{
    <h1>Edit Simulation</h1>
    <p>Edit the simulation.</p>
}
@if (PageAction == "delete")
{
    <h1>Delete Simulation</h1>
    <p>Delete the Simulation.</p>
}
<p>
    <a href="/projectsimulation/@ProjectId" class="btn btn-light" role="button">
        <span class="oi oi-arrow-left" aria-hidden="true"></span> Cancel
    </a>
</p>

@if (@model is not null)
{
    <EditForm EditContext="@editContext" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="Name" class="form-label">Name</label>
            <InputText @bind-Value="model.Name" class="form-control" disabled="@IsDisabled" />
            <ValidationMessage For="@(() => model.Name)" />
        </div>
        <div class="mb-3">
            <label for="Proposal" class="form-label">Proposal</label>
            <InputText @bind-Value="model.Proposal" class="form-control" disabled="@IsDisabled" />
            <ValidationMessage For="@(() => model.Proposal)" />
        </div>
        <div class="mb-3">
            <label for="Description" class="form-label">Description</label>
            <InputText @bind-Value="model.Description" class="form-control" disabled="@IsDisabled" />
            <ValidationMessage For="@(() => model.Description)" />
        </div>
        @if (!IsDisabled)
        {
            <div class="mb-3">
                <label for="ProjectDesignId" class="form-label">Design</label>
                <InputSelect @bind-Value="model.ProjectDesignId" class="form-control">
                    @if (designs is not null)
                    {
                        @foreach (var option in designs)
                        {
                            <option value="@option.Id">@option.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => model.ProjectDesignId)" />
            </div>
        }
        else {
            <div class="mb-3">
                <label for="ProjectDesignId" class="form-label">Design</label>
                <InputText @bind-Value="model.ProjectDesign.Name" class="form-control" disabled="true" />
                <ValidationMessage For="@(() => model.ProjectDesignId)" />
            </div>
        }
        <div class="mb-3">
            <label for="CreatedOn" class="form-label">Created On</label>
            <InputDate @bind-Value="model.CreatedOn" class="form-control" disabled="true" />
            <ValidationMessage For="@(() => model.CreatedOn)" />
        </div>
        <div class="mb-3">
            <label for="CurrencyCode" class="form-label">Currency</label>
            <InputText @bind-Value="model.CurrencyCode" class="form-control" disabled="true" />
            <ValidationMessage For="@(() => model.CurrencyCode)" />
        </div>
        <div class="mb-3">
            <label for="Environment" class="form-label">Environment</label>
            <InputText @bind-Value="model.Environment" class="form-control" disabled="true" />
            <ValidationMessage For="@(() => model.Environment)" />
        </div>
        <div class="mb-3">
            <label for="Location" class="form-label">Location</label>
            <InputText @bind-Value="model.Location" class="form-control" disabled="true" />
            <ValidationMessage For="@(() => model.Location)" />
        </div>
        <div>
            @if (!IsDisabled) {
                <button type="submit" class="btn btn-primary">Save</button>
            } else {
                <button type="submit" class="btn btn-primary">Delete</button>
            }
            <button class="btn btn-light" @onclick="CancelItem">Cancel</button>
        </div>
    </EditForm>
}

@code {
    private EditContext? editContext { get; set; }
    private ValidationMessageStore? messageStore { get; set; }
    private AzureApp.Shared.Project? project { get; set; }
    private AzureApp.Shared.ProjectSimulation? model { get; set; }
    private AzureApp.Shared.ProjectDesign[]? designs { get; set; }
    private string navigateBack = string.Empty;
    private bool IsDisabled = true;

    [Parameter]
    public int ProjectId { get; set; }

    [Parameter]
    public string PageAction { get; set; } = string.Empty;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        PageAction = (string.IsNullOrEmpty(PageAction) ? PageAction = "add" : PageAction.Trim().ToLower());
        IsDisabled = (PageAction == "delete");
        project = await Http.GetFromJsonAsync<AzureApp.Shared.Project>($"{nameof(AzureApp.Shared.Project)}/{ProjectId}");
        designs = await Http.GetFromJsonAsync<AzureApp.Shared.ProjectDesign[]>($"{nameof(AzureApp.Shared.ProjectDesign)}/all/{ProjectId}");
        model = new(project!);
        if (designs is not null && designs.Length>0)
        {
            model.ProjectDesignId = designs.ElementAt(0).Id;
            model.ProjectDesign = designs.ElementAt(0);
        };
        if (Id>0)
            model = await Http.GetFromJsonAsync<AzureApp.Shared.ProjectSimulation>($"{nameof(AzureApp.Shared.ProjectSimulation)}/item/{Id}");

        editContext = new(model!);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);
        navigateBack = $"/projectsimulation/{ProjectId}";
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        messageStore!.Clear();

        model!.ProjectDesign = designs!.ToList().FirstOrDefault(q => q.Id == model.ProjectDesignId)!;
        if (model.ProjectDesignId == 0 ||
            model.ProjectDesign is null ||
            model.ProjectDesign.Id == 0 ||
            string.IsNullOrEmpty(model.ProjectDesign.Name))
        {
            messageStore.Add(editContext!.Field(nameof(model.ProjectDesign)), "Required selection");
            return;
        }
    }

    private async Task HandleSubmit()
    {
        if (model is null || editContext is null || messageStore is null)
            return;

        HttpResponseMessage response;

        switch (PageAction)
        { 
            case "add": response = await Http.PostAsJsonAsync<AzureApp.Shared.ProjectSimulation>(nameof(AzureApp.Shared.ProjectSimulation), model); break;
            case "edit": response = await Http.PutAsJsonAsync<AzureApp.Shared.ProjectSimulation>(nameof(AzureApp.Shared.ProjectSimulation), model); break;
            case "delete": response = await Http.DeleteAsync($"{nameof(AzureApp.Shared.ProjectSimulation)}/{Id}"); break;
            default: throw new ApplicationException($"Invalid action for {nameof(AzureApp.Shared.ProjectSimulation)}");
        }

        if (response.IsSuccessStatusCode)
        { 
            NavigationManager.NavigateTo(navigateBack);
            return;
        }

        var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>() ?? new();
        if (errors.Any())
        {
            foreach (var keyValuePair in errors)
            {
                foreach (var msg in keyValuePair.Value)
                {
                    messageStore.Add(editContext.Field(keyValuePair.Key), msg);
                }
            }
        }
        
        editContext.Validate();
        StateHasChanged();
    }

    private void CancelItem()
    {
        NavigationManager.NavigateTo(navigateBack);
    }
}
