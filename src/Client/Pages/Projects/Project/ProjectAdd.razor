@page "/project/add"
@using AzureApp.Shared
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Projects</PageTitle>

<h1>Add Project</h1>

<p>Create a new project.</p>
<p>
    <a href="/project" class="btn btn-light" role="button">
        <span class="oi oi-arrow-left" aria-hidden="true"></span> Cancel
    </a>
</p>

@if (@model is not null)
{
    <EditForm EditContext="@editContext" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="Name" class="form-label">Name</label>
            <InputText @bind-Value="model.Name" class="form-control" />
            <ValidationMessage For="@(() => model.Name)" />
        </div>
        <div class="mb-3">
            <label for="CurrencyCode" class="form-label">Currency</label>
            <InputSelect @bind-Value="model.CurrencyCode" class="form-control">
                @if (currencies is not null) { 
                @foreach(var option in currencies)
                {
                    <option value="@option.Code">@option.Code</option>
                }
                }
            </InputSelect>
            <ValidationMessage For="@(() => model.CurrencyCode)" />
        </div>
        <div>
            <button type="submit" class="btn btn-primary">Save</button>
            <button class="btn btn-light" @onclick="CancelItem">Cancel</button>
        </div>
    </EditForm>
}

@code {
    private EditContext? editContext { get; set; }
    private ValidationMessageStore? messageStore { get; set; }
    private AzureApp.Shared.Project? model { get; set; }
    private SetupCurrency[]? currencies { get; set; }
    private readonly string navigateBack = "/project";

    protected override async Task OnInitializedAsync()
    {
        currencies = await Http.GetFromJsonAsync<SetupCurrency[]>($"{nameof(SetupCurrency)}");
        model = new();
        editContext = new(model);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        messageStore!.Clear();
    }

    private async Task HandleSubmit()
    {
        if (model is null || editContext is null || messageStore is null)
            return;

        var response = await Http.PostAsJsonAsync<AzureApp.Shared.Project>(nameof(AzureApp.Shared.Project), model);
        if (response.IsSuccessStatusCode)
        { 
            NavigationManager.NavigateTo(navigateBack);
            return;
        }

        var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>() ?? new();
        if (errors.Any())
        {
            foreach (var keyValuePair in errors)
            {
                foreach (var msg in keyValuePair.Value)
                {
                    messageStore.Add(editContext.Field(keyValuePair.Key), msg);
                }
            }
        }

        editContext.Validate();
        StateHasChanged();
    }

    private void CancelItem()
    {
        NavigationManager.NavigateTo(navigateBack);
    }
}
