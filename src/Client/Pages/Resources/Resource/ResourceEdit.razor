@page "/resource/edit/{id:int}"
@using AzureApp.Shared
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Resources</PageTitle>

<h1>Resources</h1>

<p>Edit the resource.</p>
<p>
    <a href="/resource" class="btn btn-light" role="button">
        <span class="oi oi-arrow-left" aria-hidden="true"></span> Cancel
    </a>
</p>

@if (@model is not null)
{
    <EditForm EditContext="@editContext" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="Name" class="form-label">Name</label>
            <InputText @bind-Value="model.Name" class="form-control" />
            <ValidationMessage For="@(() => model.Name)" />
        </div>
        <div class="mb-3">
            <label for="Description" class="form-label">Description</label>
            <InputText @bind-Value="model.Description" class="form-control" />
            <ValidationMessage For="@(() => model.Description)" />
        </div>
        <div class="mb-3">
            <label for="CostDriver" class="form-label">Cost Driver</label>
            <InputText @bind-Value="model.CostDriver" class="form-control" />
            <ValidationMessage For="@(() => model.CostDriver)" />
        </div>
        <div class="mb-3">
            <label for="CostBasedOn" class="form-label">Cost is based on</label>
            <InputText @bind-Value="model.CostBasedOn" class="form-control" />
            <ValidationMessage For="@(() => model.CostBasedOn)" />
        </div>
        <div class="mb-3">
            <label for="Limitations" class="form-label">Limitations</label>
            <InputText @bind-Value="model.Limitations" class="form-control" />
            <ValidationMessage For="@(() => model.Limitations)" />
        </div>
        <div class="mb-3">
            <label for="AboutUrl" class="form-label">About Link</label>
            <InputText @bind-Value="model.AboutURL" class="form-control" />
            <ValidationMessage For="@(() => model.AboutURL)" />
        </div>
        <div class="mb-3">
            <label for="PricingURL" class="form-label">Pricing Link</label>
            <InputText @bind-Value="model.PricingURL" class="form-control" />
            <ValidationMessage For="@(() => model.PricingURL)" />
        </div>
        <div class="mb-3">
            <label for="Service" class="form-label">Service</label>
            <InputText @bind-Value="model.Service" class="form-control" />
            <ValidationMessage For="@(() => model.Service)" />
        </div>
        <div class="mb-3">
            <label for="Category" class="form-label">Category</label>
            <InputText @bind-Value="model.Category" class="form-control" />
            <ValidationMessage For="@(() => model.Category)" />
        </div>
        <div class="mb-3">
            <label for="Product" class="form-label">Product</label>
            <InputText @bind-Value="model.Product" class="form-control" />
            <ValidationMessage For="@(() => model.Product)" />
        </div>
        <div class="mb-3">
            <label for="Size" class="form-label">Size</label>
            <InputText @bind-Value="model.Size" class="form-control" />
            <ValidationMessage For="@(() => model.Size)" />
        </div>
        <div class="mb-3">
            <label for="Remarks" class="form-label">Remarks</label>
            <InputText @bind-Value="model.Remarks" class="form-control" />
            <ValidationMessage For="@(() => model.Remarks)" />
        </div>
        <div>
            <button type="submit" class="btn btn-primary">Save</button>
            <button class="btn btn-light" @onclick="CancelItem">Cancel</button>
        </div>
    </EditForm>
}

@code {
    private EditContext? editContext { get; set; }
    private ValidationMessageStore? messageStore { get; set; }
    private AzureApp.Shared.Resource? model { get; set; }

    [Parameter]
    public int? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        model = await Http.GetFromJsonAsync<AzureApp.Shared.Resource>($"{nameof(AzureApp.Shared.Resource)}/{Id}");
        if (model is null)
        {
            Id = 0;
            model = new();
        }
        editContext = new(model);
        messageStore = new(editContext);
    }

    private async Task HandleSubmit()
    {
        if (model is null || editContext is null)
            return;

        var response = await Http.PutAsJsonAsync<AzureApp.Shared.Resource>(nameof(AzureApp.Shared.Resource), model);
        if (response.IsSuccessStatusCode)
        { 
            NavigationManager.NavigateTo("/resource");
            return;
        }

        if (messageStore is not null && editContext is not null)
        {
            var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>() ?? new();
            if (errors.Any())
            {
                foreach (var keyValuePair in errors)
                {
                    foreach(var msg in keyValuePair.Value) 
                    {
                        messageStore.Add(editContext.Field(keyValuePair.Key), msg);
                    }
                }
            }

            editContext.Validate();
        }

        StateHasChanged();
    }

    private void CancelItem()
    {
        NavigationManager.NavigateTo("/resource");
    }
}
