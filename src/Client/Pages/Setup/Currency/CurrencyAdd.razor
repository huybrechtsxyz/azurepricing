@page "/currency/add"
@using AzureApp.Shared
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Currencies</PageTitle>

<h1>Currency</h1>

<p>Create a new currency.</p>
<p>
    <a href="/currency" class="btn btn-primary" role="button"><i class="oi oi-arrow-left"></i>Cancel</a>
</p>

@if (@Model is not null)
{
    <EditForm EditContext="@editContext" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="Code" class="form-label">Code</label>
            <div class="col-md-4"><InputText @bind-Value="Model.Code" class="form-control" /></div>
            <ValidationMessage For="@(() => Model.Code)" />
        </div>
        <div>
            <button type="submit" class="btn btn-primary">Save</button>
            <button class="btn btn-light" @onclick="CancelItem">Cancel</button>
        </div>
    </EditForm>
}

@code {
    private EditContext? editContext { get; set; }
    private ValidationMessageStore? messageStore { get; set; }
    private SetupCurrency? Model { get; set; }

    protected override Task OnInitializedAsync()
    {
        Model = new();
        editContext = new(Model);
        messageStore = new(editContext);
        return base.OnInitializedAsync();
    }

    private async Task HandleSubmit()
    {
        if (Model is null || editContext is null)
            return;

        var response = await Http.PostAsJsonAsync<SetupCurrency>("SetupCurrency", Model);
        if (response.IsSuccessStatusCode)
        { 
            NavigationManager.NavigateTo("/currency");
            return;
        }

        if (messageStore is not null && editContext is not null)
        {
            var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>() ?? new();
            if (errors.Any())
            {
                foreach (var keyValuePair in errors)
                {
                    foreach(var msg in keyValuePair.Value) 
                    {
                        messageStore.Add(editContext.Field(keyValuePair.Key), msg);
                    }
                }
            }
        }

        StateHasChanged();
    }

    private void CancelItem()
    {
        NavigationManager.NavigateTo("/currency");
    }
}
