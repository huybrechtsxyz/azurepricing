@page "/location/add"
@using AzureApp.Shared
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Locations</PageTitle>

<h1>Location</h1>

<p>Create a new location.</p>
<p>
    <a href="/location" class="btn btn-light" role="button">
        <span class="oi oi-arrow-left" aria-hidden="true"></span> Cancel
    </a>
</p>

@if (@model is not null)
{
    <EditForm EditContext="@editContext" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="Name" class="form-label">Name</label>
            <InputText @bind-Value="model.Name" class="form-control" />
            <ValidationMessage For="@(() => model.Name)" />
        </div>
        <div class="mb-3">
            <label for="ShortName" class="form-label">Abbreviation</label>
            <InputText @bind-Value="model.ShortName" class="form-control" />
            <ValidationMessage For="@(() => model.ShortName)" />
        </div>
        <div>
            <button type="submit" class="btn btn-primary">Save</button>
            <button class="btn btn-light" @onclick="CancelItem">Cancel</button>
        </div>
    </EditForm>
}

@code {
    private EditContext? editContext { get; set; }
    private ValidationMessageStore? messageStore { get; set; }
    private SetupLocation? model { get; set; }

    protected override void OnInitialized()
    {
        model = new();
        editContext = new(model);
        messageStore = new(editContext);
    }

    private async Task HandleSubmit()
    {
        if (model is null || editContext is null)
            return;

        var response = await Http.PostAsJsonAsync<SetupLocation>("SetupLocation", model);
        if (response.IsSuccessStatusCode)
        { 
            NavigationManager.NavigateTo("/location");
            return;
        }

        if (messageStore is not null && editContext is not null)
        {
            var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>() ?? new();
            if (errors.Any())
            {
                foreach (var keyValuePair in errors)
                {
                    foreach(var msg in keyValuePair.Value) 
                    {
                        messageStore.Add(editContext.Field(keyValuePair.Key), msg);
                    }
                }
            }

            editContext.Validate();
        }

        StateHasChanged();
    }

    private void CancelItem()
    {
        NavigationManager.NavigateTo("/location");
    }
}
