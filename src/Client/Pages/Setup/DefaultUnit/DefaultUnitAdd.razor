@page "/defaultunit/add"
@using AzureApp.Shared
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Default Units</PageTitle>

<h1>Default Units</h1>

<p>Create a new default measuring unit.</p>
<p>
    <a href="/defaultunit" class="btn btn-light" role="button">
        <span class="oi oi-arrow-left" aria-hidden="true"></span> Cancel
    </a>
</p>

@if (@model is not null)
{
    <EditForm EditContext="@editContext" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="v" class="form-label">Azure Unit of Measure</label>
            <InputText @bind-Value="model.AzureMeasure" class="form-control" />
            <ValidationMessage For="@(() => model.AzureMeasure)" />
        </div>
        <div class="mb-3">
            <label for="SetupMeasureUnitId" class="form-label">Measuring Unit</label>
            <InputSelect @bind-Value="model.SetupMeasureUnitId" class="form-control">
                @foreach(var option in measures)
                {
                    <option value="@option.Id">@option.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => model.SetupMeasureUnitId)" />
        </div>
        <div>
            <button type="submit" class="btn btn-primary">Save</button>
            <button class="btn btn-light" @onclick="CancelItem">Cancel</button>
        </div>
    </EditForm>
}

@code {
    private EditContext? editContext { get; set; }
    private ValidationMessageStore? messageStore { get; set; }
    private SetupDefaultUnit? model { get; set; }
    private SetupMeasureUnit[] measures { get; set; } = Array.Empty<SetupMeasureUnit>();

    protected override async Task OnInitializedAsync()
    {
        model = new();
        editContext = new(model);
        messageStore = new(editContext);

        measures = await Http.GetFromJsonAsync<SetupMeasureUnit[]>($"{nameof(SetupDefaultUnit)}/units") ?? Array.Empty<SetupMeasureUnit>();
    }

    private async Task HandleSubmit()
    {
        if (model is null || editContext is null)
            return;

        var response = await Http.PostAsJsonAsync<SetupDefaultUnit>(nameof(SetupDefaultUnit), model);
        if (response.IsSuccessStatusCode)
        { 
            NavigationManager.NavigateTo("/defaultunit");
            return;
        }

        if (messageStore is not null && editContext is not null)
        {
            var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>() ?? new();
            if (errors.Any())
            {
                foreach (var keyValuePair in errors)
                {
                    foreach(var msg in keyValuePair.Value) 
                    {
                        messageStore.Add(editContext.Field(keyValuePair.Key), msg);
                    }
                }
            }

            editContext.Validate();
        }

        StateHasChanged();
    }

    private void CancelItem()
    {
        NavigationManager.NavigateTo("/defaultunit");
    }
}
