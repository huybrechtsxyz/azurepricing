@page "/search"
@using AzureApp.Shared
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Search Rates</PageTitle>

<h1>Search Rates</h1>

<p>Find a list of resource rates</p>

@if (status == "parameters")
{
    @if (parameters is not null)
    {
        <EditForm EditContext="@searchContext" OnValidSubmit="SearchRates">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label for="Service" class="form-label">Azure Service</label>
                <InputSelect @bind-Value="parameters.Service" class="form-control">
                    @if (services is not null && services.Length > 0)
                    {
                        foreach (var option in services)
                        {
                            <option value="@option.Name">@option.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => parameters.Service)" />
            </div>
            <div class="mb-3">
                <label for="Location" class="form-label">Azure Location</label>
                <InputSelect @bind-Value="parameters.Location" class="form-control">
                    @if (locations is not null && locations.Length > 0)
                    {
                        foreach (var option in locations)
                        {
                            <option value="@option.Name">@option.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => parameters.Location)" />
            </div>
            <div class="mb-3">
                <label for="Currency" class="form-label">Currency Code</label>
                <InputSelect @bind-Value="parameters.CurrencyCode" class="form-control">
                    @if (currencies is not null && currencies.Length > 0)
                    {
                        foreach (var option in currencies)
                        {
                            <option value="@option.Code">@option.Code</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => parameters.CurrencyCode)" />
            </div>
            <div>
                <button type="submit" class="btn btn-primary"><span class="oi oi-magnifying-glass" aria-hidden="true"></span> Search</button>
                <button class="btn btn-light" @onclick="ClearSearch">Clear</button>
            </div>
        </EditForm>
    }
    else
    {
        <p><em>Loading search parameters...</em></p>
    }
}

@if(status == "rates")
{
    @if(model is not null)
    {
        <EditForm EditContext="@editContext" OnValidSubmit="SelectRates">
            <div>
                <button type="submit" class="btn btn-primary"><span class="oi oi-chevron-right" aria-hidden="true"></span> Import</button>
                <button class="btn btn-light" @onclick="ClearSearch">Reset</button>
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th> </th>
                        <th>Resource</th>
                        <th>Sku</th>
                        <th>Meter</th>
                        <th>Retail Price</th>
                        <th>Minimum Units</th>
                        <th>Unit Of Measure</th>
                        <th>Type</th>
                        <th>Service</th>
                        <th>Category</th>
                        <th>Location</th>
                        <th>Currency</th>
                        <th>Valid From </th>
                        <th>Primary?</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in model)
                    {
                        <tr>
                            <td><InputCheckbox @bind-Value="item.IsSelected" class="form-check" /></td>
                            <td>@item.Product</td>
                            <td>@item.Sku</td>
                            <td>@item.MeterName</td>
                            <td>@item.RetailPrice</td>
                            <td>@item.MiminumUnits</td>
                            <td>@item.UnitOfMeasure</td>
                            <td>@item.Type</td>
                            <td>@item.Service</td>
                            <td>@item.Category</td>
                            <td>@item.Location</td>
                            <td>@item.CurrencyCode</td>
                            <td>@item.ValidFrom.ToString("yyyy-MM-dd")</td>
                            <td>@item.IsPrimaryRegion</td>
                        </tr>
                    }
                </tbody>
            </table>
        </EditForm>
    }
    else
    {
        <p><em>Loading search rates...</em></p>
    }
}

@if(status == "resource")
{
    @if(model is not null)
    {
        <EditForm EditContext="@resxContext" OnValidSubmit="ImportRates">
            <div>
                <button type="submit" class="btn btn-primary"><span class="oi oi-check" aria-hidden="true"></span> Import</button>
                <button class="btn btn-light" @onclick="ClearSearch">Reset</button>
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th> </th>
                        <th>Name</th>
                        <th>Description</th>
                        <th>CostDriver</th>
                        <th>CostBasedOn</th>
                        <th>Service</th>
                        <th>Category</th>
                        <th>Product</th>
                        <th>Size</th>
                        <th>Remarks</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in resources)
                    {
                        <tr>
                            <td><InputCheckbox @bind-Value="item.IsSelected" class="form-check" /></td>
                            <td>@item.Name</td>
                            <td>@item.Description</td>
                            <td>@item.CostDriver</td>
                            <td>@item.CostBasedOn</td>
                            <td>@item.Service</td>
                            <td>@item.Category</td>
                            <td>@item.Product</td>
                            <td>@item.Size</td>
                            <td>@item.Remarks</td>
                        </tr>
                    }
                </tbody>
            </table>
        </EditForm>
    }
    else
    {
        <p><em>Loading resources...</em></p>
    }
}

@code {
    private string status = "parameters";

    private EditContext? searchContext { get; set; }
    private ValidationMessageStore? searchStore { get; set; }
    private SearchParameters parameters = null!;

    private SetupService[] services = null!;
    private SetupLocation[] locations = null!;
    private SetupCurrency[] currencies = null!;

    private EditContext? editContext { get; set; }
    private ValidationMessageStore? messageStore { get; set; }
    private SearchRate[] model = null!;

    private EditContext? resxContext { get; set; }
    private ValidationMessageStore? resxStore { get; set; }
    private Resource[] resources = null!;
    private SearchRate[] selection = null!;

    protected override async Task OnInitializedAsync()
    {
        // Parameters
        parameters = new();
        searchContext = new(parameters);
        searchStore = new(searchContext);

        // Initial data
        services = await Http.GetFromJsonAsync<SetupService[]>($"{nameof(SearchRate)}/services") ?? Array.Empty<SetupService>();
        locations = await Http.GetFromJsonAsync<SetupLocation[]>($"{nameof(SearchRate)}/locations") ?? Array.Empty<SetupLocation>();
        currencies = await Http.GetFromJsonAsync<SetupCurrency[]>($"{nameof(SearchRate)}/currencies") ?? Array.Empty<SetupCurrency>();
        parameters.Service = (services.Length > 0 ? services[0].Name : string.Empty);
        parameters.Location = (locations.Length > 0 ? locations[0].Name : string.Empty);
        parameters.CurrencyCode = (currencies.Length > 0 ? currencies[0].Code : string.Empty);

        // Search Results
        model = Array.Empty<SearchRate>();
        editContext = new(model);
        messageStore = new(editContext);

        // Resources
        resources = Array.Empty<Resource>();
        resxContext = new(resources);
        resxStore = new(resxContext);
    }

    private async Task SearchRates()
    {
        if (parameters is null || searchContext is null)
            return;

        var response = await Http.PostAsJsonAsync<SearchParameters>($"{nameof(SearchRate)}/search", parameters);
        response.EnsureSuccessStatusCode();
        model = await response.Content.ReadFromJsonAsync<SearchRate[]>() ?? Array.Empty<SearchRate>();
        status = "rates";
        StateHasChanged();
    }

    private void ClearSearch()
    {
        model = Array.Empty<SearchRate>();
        status = "parameters";
        StateHasChanged();
    }

    private async Task SelectRates()
    {
        selection = model.Where(q => q.IsSelected == true).ToArray();

        resources = await Http.GetFromJsonAsync<Resource[]>($"{nameof(SearchRate)}/resources") ?? Array.Empty<Resource>();

        status = "resource";
        StateHasChanged();
    }

    private async Task ImportRates()
    { 
        if (model is null || editContext is null)
            return;

        List<SearchRate> copies = new();
        foreach (var resx in resources.ToList().Where(q => q.IsSelected == true))
        {
            foreach(var item in selection)
            {
                SearchRate rate = new(item, false)
                {
                    ResourceId = resx.Id
                };
                copies.Add(rate);
            }
        }

        var response = await Http.PostAsJsonAsync<SearchRate[]>($"{nameof(SearchRate)}/import", copies.ToArray());
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/resource");
            return;
        }

        if (messageStore is not null && editContext is not null)
        {
            var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>() ?? new();
            if (errors.Any())
            {
                foreach (var keyValuePair in errors)
                {
                    foreach (var msg in keyValuePair.Value)
                    {
                        messageStore.Add(editContext.Field(keyValuePair.Key), msg);
                    }
                }
            }

            editContext.Validate();
        }

        StateHasChanged();
    }
}
